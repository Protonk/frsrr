% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sample.R
\name{frsr_sample}
\alias{frsr_sample}
\title{Sample FRSR}
\arguments{
\item{n}{Number of samples to generate.}

\item{magic_min}{Minimum value for the magic number range. Default is \code{1596980000L}.}

\item{magic_max}{Maximum value for the magic number range. Default is \code{1598050000L}.}

\item{x_min}{Minimum value for the input range. Default is \code{0.25}.}

\item{x_max}{Maximum value for the input range. Default is \code{1.0}.}
}
\value{
A data frame with the sampled values and optional details from \code{frsr}.
}
\description{
Generate samples for the Fast Reciprocal Square Root (FRSR) algorithm.
}
\details{
The following parameters are passed to \code{\link{frsr}}:

\itemize{
 \item{\code{"NRmax"}: Maximum iterations for the Newton-Raphson method. Default is \code{1}}
 \item{\code{"A"}: Parameter A for the iteration formula. Default is \code{1.5}}
 \item{\code{"B"}: Parameter B for the iteration formula. Default is \code{0.5}}
 \item{\code{"tol"}: Tolerance level for stopping. Default is \code{0}}
 \item{\code{"keep_params"}: Logical indicating whether to output parameters. Default is \code{FALSE}.}
}


The default range for the magic number was determined by experiment.
Values within this range are relatively good restoring constants, with
numbers much higher or lower requiring more iterations to converge or
not converging at all.

Floating point values are searched by stratified sampling 
which samples uniformly within exponent ranges, as that is how
floating point numbers are distributed. The default range is 
chosen because the the error of the FISR along \eqn{2^-2} and \eqn{2^0}
repeats over the whole range of the function.
}
\examples{

#' \donttest{
# Generate 4 samples using default parameters
samples <- frsr_sample(4)
print(samples)
#       input  initial after_one    final        error         diff iters
# 1 0.8100569 1.154508  1.108492 1.108492 0.0023223383 -0.046015978     1
# 2 0.4073950 1.573407  1.566680 1.566680 0.0000273157 -0.006727338     1
# 3 0.6304980 1.359966  1.247014 1.247014 0.0098225391 -0.112952113     1
# 4 0.4316622 1.607666  1.514687 1.514687 0.0048355814 -0.092979550     1
#}

}
\references{
Walker, A. J. (1974) Fast generation of uniformly distributed pseudorandom numbers with floating-point representation. Electronics Letters, 10, 533-534, \url{https://api.semanticscholar.org/CorpusID:110056594}

Pharr, M. (2022) Sampling in Floating Point (2/3): 1D Intervals. Matt Pharr's Blog, \url{https://pharr.org/matt/blog/2022/03/14/sampling-float-intervals}
}
\seealso{
\code{\link{frsr}}
}
